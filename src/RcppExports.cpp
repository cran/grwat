// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_baseflow_cpp
std::vector<double> get_baseflow_cpp(const std::vector<double>& Qin, const double& a, const double& k, const double& C, const double& aq, const int& passes, const int& padding, std::string method);
RcppExport SEXP _grwat_get_baseflow_cpp(SEXP QinSEXP, SEXP aSEXP, SEXP kSEXP, SEXP CSEXP, SEXP aqSEXP, SEXP passesSEXP, SEXP paddingSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Qin(QinSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const double& >::type aq(aqSEXP);
    Rcpp::traits::input_parameter< const int& >::type passes(passesSEXP);
    Rcpp::traits::input_parameter< const int& >::type padding(paddingSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(get_baseflow_cpp(Qin, a, k, C, aq, passes, padding, method));
    return rcpp_result_gen;
END_RCPP
}
// separate_cpp
DataFrame separate_cpp(const std::vector<int>& Year, const std::vector<int>& Mon, const std::vector<int>& Day, const std::vector<double>& Qin, const std::vector<double>& Tin, const std::vector<double>& Pin, List params, bool debug);
RcppExport SEXP _grwat_separate_cpp(SEXP YearSEXP, SEXP MonSEXP, SEXP DaySEXP, SEXP QinSEXP, SEXP TinSEXP, SEXP PinSEXP, SEXP paramsSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type Year(YearSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type Mon(MonSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type Day(DaySEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Qin(QinSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Tin(TinSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Pin(PinSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(separate_cpp(Year, Mon, Day, Qin, Tin, Pin, params, debug));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_grwat_get_baseflow_cpp", (DL_FUNC) &_grwat_get_baseflow_cpp, 8},
    {"_grwat_separate_cpp", (DL_FUNC) &_grwat_separate_cpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_grwat(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
